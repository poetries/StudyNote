JFC：java基础类库(具体的类可以查看API文档)

观察者模式：
	事件监听者对事件源进行监听，事件源会发生某些事件，监听者需要对事件作出相应的处理。
	
	事件监听者(Observer)：	
		处理事件
		
	事件对象(Observable)：
		注册监听
		取消监听
		通知监听
		
	编程步骤：
		a. 定义一个监听者，使其实现Observer接口，实现其中的方法update(Observable o, Object arg)。
		b. 定义一个事件对象，使其继承Observable类，定义一个产生事件的方法，在方法里去注册监听addObserver(Observer o)、标志改变setChanged()（如果不写，则说明该事件没有发生，监听者不会反映）、启动监听notifyObservers()。
			注意：注册监听和标志改变不分先后，但标志改变和启动监听是不能互换的。
			
	应用：当某事物发生变化，需要采取行动，则可以采用观察者模式。
	
适配器模式：
	Adapter适配器模式是一种结构型模式，将两个互不兼容的类纠合在一起。
	
	主要应对：由于应用环境的变化，常常需要将“一些现存的对象”放在新的环境中应用，但是，新环境要求的接口是现存对象所不满足的。
	
	作用：在不改变源代码的情况下实现需求。

java.math.BigDecimal：不可变的、任意精度的有符号十进制数。
	必须用String类型进行构造，才能实现精确计算

I/O流后面会详细讲解，今天的了解下就可以了。