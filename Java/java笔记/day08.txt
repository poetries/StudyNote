异常：
	异常的分类
		Java会将所有的异常封装成对象，其根本父类为Throwable。
		Throwable有两个子类：Error 和Exception。
		
		Error：一个Error对象表示一个程序错误，指的是底层的低级的不可恢复的严重错误
			遇到Error，程序一定会退出，因为已经失去了运行所必须的物理环境。
			对于Error我们无法进行处理，因为我们是通过程序来应对错误的，可是程序已经退出了。
			
		Exception：由特定因素，导致程序无法继续，但不影响虚拟机的正常执行。
			未检查异常(Runtime Exception)：
				是因为程序员没有进行必要的检查，由于程序员的疏忽而引起的异常。
				对于未检查异常可以不处理，编译可以通过，应对未检查异常的方法就是养成良好的检查习惯
			已检查异常(非Runtime Exception)：
				是不可避免的，对于已检查异常必须处理，否则编译不通过。

	异常处理的机制：
		当一个方法中有一条语句出现了异常，它就会throw（抛出）一个异常对象（throw 异常对象），然后后面的语句不会执行，而返回上一级方法，其上一级方法接受到了异常对象之后，有可能对这个异常进行处理(进行处理则不会上抛)，也可能将这个异常传到它的上一级，如果最上一级(main方法)不处理就会传给虚拟机，虚拟机就会终止程序的运行。

	异常的处理方式：throws和try-catch方法
		try-catch处理方式：
				try{		//一个
				
					(1)可能出现异常的语句
					
				} catch(XxxException e /*捕获的异常*/){	//0或n个
				
					(2)处理异常的代码
					
				} finally{		//0或1个
				
					(3)必须要执行的代码
					
				}
				(4)方法中的其他代码
					
			如果代码正确，那么程序不经过catch语句直接向下运行；
			如果代码不正确，则将返回的异常对象和e进行匹配，如果匹配成功，则处理其后面的异常处理代码。
			try中如果发现错误，即跳出try块去匹配catch，那么try后面的语句就不会被执行。
			一个try可以跟多个catch语句，用于处理不同情况，但是不能将父类型的exception的位置写在子类型的excepiton之前。
			在try-catch后还可以再跟一子句finally。其中的代码语句论有没有异常都会被执行(因为finally子句的这个特性，所以一般将释放资源，关闭连接的语句写在里面)。
			finally中的代码和try-catch中的代码冲突时，finally中的代码一定会被执行且会忽略try-catch中的代码。但是如果try-catch中有System.exit(0);(虚拟机退出语句)，则不会去执行fianlly中的代码。
		
		throws/throw处理方式：
			throw 写在方法内，后面跟一个异常对象。
			throws 在方法的定义中说明方法可能抛出的异常，后面跟异常类的名字，声明这个方法将不处理异常，把异常交给上一级方法处理。
			调用时，调用者不能抛出范围更小的异常。
			对于方法a，如果它定义了throws Exception。那么当它调用的方法b返回异常对象时，方法a并不处理，而将这个异常对象向上一级返回，如果所有的方法均不进行处理，返回到主方法，如主方法也不进行处理，则到虚拟机中，程序中止。
			如果在方法的程序中有一行throw new Exception()，那么其后的程序不执行，如果没有对这个可能出现的检查结果进行处理，那么程序就会报错。
			throws和throw没有必然的联系。
	
		注意：
			方法的覆盖中，如果子类的方法抛出的例外是父类方法抛出的例外的父类型，那么编译就会出错：子类无法覆盖父类。
			子类抛出的例外或者与父类抛出的例外一致，或者是父类抛出例外的子类型，或者子类型不抛出例外。
			如果父类型无throws时，子类型也不允许出现throws。此时只能使用try catch。

		自定义异常：
			a. 使其继承Exception或者RuntimeException。
			b. 写构造器，直接调用父类的构造器
			
断言(assert)：用来调试、测试代码
	格式：
		assert 布尔表达式: 字符串  (如果布尔表达式为false时，这个字符串才会显示)
	注意：
		assert默认是关闭的，使用时需要使用" -ea "进行开启，" -da "是关闭，如：java -ea 类名。
		断言是以异常方式去执行的，当断言的布尔表达式为假时，会中断代码。
		不能继承性的打开(java -ea:类名  这样只能打开该类，如果存在父类，不会去打开父类)
		
图形界面：
	AWT：抽象窗口工具(Abstract Window Toolkit)
		组件：图形界面中所有能看到的，比如按钮等。
		容器：用来管理其他组件的对象
		布局管理器：布置组件在容器中的位置和大小
		
	Swing：AWT的一个增强版
		
	构造图形界面的步骤：
		选择一个容器
		设置容器的布局管理器
		向容器中添加组件
		事件的监听
		
	容器(Container)：用于管理其他的组件的对象，组件必须放到容器里
		JFrame：一个最顶层的窗体容器，所有其他的组件必须放在顶层容器里。
		JPanel：不是顶层容器，必须放在顶层容器中，是透明的（默认）。
		容器的方法：
			add(Component com)  将组件加入容器。 
			setLayout(LayoutManager manager)  设置布局管理器。     
			setSize(int width,int height)  设置窗口大小
			setVisible(boolean b)  显示或隐藏此组件
			setDefaultCloseOperation(int operation)  设置关闭窗体上时默认执行的操作

	布局管理：布置组件在容器中的位置和大小
		FlowLayout：流式布局管理，Panel和JPanel的默认布局管理就是FlowLayout
			三种构造方式：
				FlowLayout() 
					构造一个新的 FlowLayout，居中对齐，默认的水平和垂直间隙是 5 个单位。 
				FlowLayout(int align) 
					构造一个新的 FlowLayout，对齐方式是指定的，默认的水平和垂直间隙是 5 个单位。 
				FlowLayout(int align, int hgap, int vgap) 
					创建一个新的流布局管理器，具有指定的对齐方式以及指定的水平和垂直间隙。 
					
		BorderLayout：按方位进行布局管理，不明确指定，就会默认加载在中间，Frame和JFrame默认的布局管理器是BorderLayout
			两种构造方式：
				BorderLayout() 
          				构造一个组件之间没有间距的新边界布局。 
				BorderLayout(int hgap, int vgap) 
          				用指定的组件之间的水平间距构造一个边界布局。 

		GridLayout：网格布局，通过行列、间距来用网格分割，把组件放入网格中，先行后列摆放组件。
			三种构造方式：
				GridLayout() 
					创建具有默认值的网格布局，即每个组件占据一行一列。 
				GridLayout(int rows, int cols) 
					创建具有指定行数和列数的网格布局。 
				GridLayout(int rows, int cols, int hgap, int vgap) 
					创建具有指定行数和列数的网格布局，并将水平和垂直间距设置为指定值。 
			
	组件：图形界面中所有能看到的
		JButton ：按钮
		JTextField：单行文本域
		JTextArea：多行文本区
		JLabel：标签