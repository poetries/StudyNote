//一个类要实现某接口中方法时，必须在方法返回值前加public

interface It1
{
	void f();

}

class A implements It1 //去掉了abstract就报错
{
	public void f() //public不能省 也不能改为其他修饰符
	{
		System.out.printf("AAAA\n");
	}
}

public class Q 
{
	public static void main(String[] args)
	{
		//It it = new It();//error
		
		It it = new A();
		it.f();
	}
}


/*	总结：

	接口：
	
	1、接口的定义：
				就是抽象方法和常量值的集合，从本质上讲，接口是一种特殊的抽象类
	
	2、接口的格式
				
				[public] interface interfaceName[extends SuperInterfaceList]
				{
					.....//常量定义和方法定义
				}

	接口的作用：

	1、通过接口可以实现不想关类的相同行为
	
		如：java规定所有完成自我赋值功能的类都必须得实现java.lang.CoIneable接口，但该接口是空的，该接口中没有任何内容，目的为了起个标志作用
	
	2、接口提供了不同对象进行协作的平台：如事件处理
	
	3、接口可以实现多继承，从一定程度上弥补了类只能单继承的缺陷
	
	4、接口是我们了解一个类功能的重要途径
	
			如：java整个容器框架就是以接口的方式建立起来的，实现不同接口类完成的是不同的功能
			
	
	接口与抽象类的区别：
	
	1、接口中的方法不允许有方法体，但抽象类却允许
	
	2、java类不允许多继承，接口允许多继承
		
		接口可以实现多继承，即一个接口可以有多个父类
		
		但java类只允许单继承，即一个类只能有一个父类
		
	
	[接口的语法知识]：重点
	
	1、接口中定义的属性必须是public static final的，而接口中定义的方法必须是public abstract的，因此这些修饰可以部分或全部省略
	
	2、 接口中定义的属性的值在实现类中不能被更改
	
	3、 一个类只能实现某个接口，不能继承某个接口
	
	4、但接口可以继承接口
	
	5、接口不但可以继承接口，而且可以继承多个接口，即接口允许多继承
	
	6、如果一个类只实现了接口的部分方法，则该类必须声明为抽象类
	
	7、一个类可以在继承父类的同时实现一个或多个接口但extend关键字必须在implement之前
	
	8、不可以new接口对象，但可以定义一个接口引用类型的变量并将其指向实现接口的对象，达到多态的目的
	
		
		
*/
